#Область СлужебныйПрограммныйИнтерфейс

Функция ServicesGET( Запрос )
	
	Перем ОписаниеСервиса;
	Перем Ответ;
	
	Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().OK );
	
	ОписаниеСервиса = РаботаСИнтернетСервисами.ПолучитьОписаниеСервиса( "gitlab" );
	
	ТелоОтвета = Новый Структура();
	ТелоОтвета.Вставить( "version", Метаданные.Версия );
	ТелоОтвета.Вставить( "services", ОписаниеСервиса );
	
	Ответ.Заголовки.Вставить( "Content-Type", "application/json" );
	Ответ.УстановитьТелоИзСтроки( КоннекторHTTP.ОбъектВJson(ТелоОтвета) );
	
	Возврат Ответ;
	
КонецФункции

// TODO переделать
















Функция WebhooksPOST(Запрос)
	
	Перем Ответ;
	Перем ОбработчикСобытия;
	Перем ДанныеТелаЗапроса;

	Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().OK );
	
	ОбработчикСобытия = Неопределено;
	
	ПроверитьСекретныйТокен( Запрос, Ответ, ОбработчикСобытия );
	ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ );
	ПроверитьЗаголовкиЗапросаWebhooksPOST( ОбработчикСобытия, Запрос, Ответ );

	ДанныеТелаЗапроса = Неопределено;	
	ПолучитьДанныеТелаЗапроса( ОбработчикСобытия, Запрос, Ответ, ДанныеТелаЗапроса );

	Возврат Ответ;
	
	
	ДополнительныеПараметры = Логирование.ДополнительныеДанные();	
	ДополнительныеПараметры.Объект = ОбработчикСобытия;
	ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
	

	
	Если ( КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		СервисыGitLab.ПроверитьТелоЗапроса(ОбработчикСобытия, ДанныеТелаЗапроса, Ответ);
		
	КонецЕсли;
	
	Если ( КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		СервисыGitLab.ЗапуститьОбработкуДанныхВФоне(ОбработчикСобытия, ДанныеТелаЗапроса);
		
	КонецЕсли;
	
	Если ( КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр("ru = 'Запрос обработан.'");
		Логирование.Информация( "GitLab.ОбработкаЗапроса.Окончание", ТекстСообщения, ДополнительныеПараметры );
											 
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьСекретныйТокен( Знач Запрос, Ответ, ОбработчикСобытия )

	Перем ТекстСообщения;	
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработчикСобытия = СервисыGitLab.НайтиОбработчикСобытияПоHTTPЗапросу( Запрос );

	Если ( НЕ ЗначениеЗаполнено(ОбработчикСобытия) ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().FORBIDDEN );
		
		ДополнительныеПараметры = Логирование.ДополнительныеДанные();	
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр( "ru = 'Секретный токен не найден.'" );
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
										 
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ )
	
	Перем ТекстСообщения;
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( НЕ ПолучитьФункциональнуюОпцию("ЗагружатьФайлыИзВнешнегоХранилища") ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().LOCKED );
		Ответ.Причина = "Loading of the files is disabled";
		ДополнительныеПараметры = Логирование.ДополнительныеДанные();	
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр( "ru = 'Отключен функционал загрузки из внешнего хранилища.'" );
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );

	КонецЕсли;

КонецПроцедуры

// Проверяет что запрос пришел от репозитория для хранения внешних отчетов и обработок.
// 
// Параметры:
// 	Запрос - Запрос - HTTP-запрос;
// Возвращаемое значение:
// 	Булево - Истина, если это репозиторий для внешних отчетов и обработок, иначе - Ложь.
Функция ЭтоРепозиторийВнешнихОтчетовИОбработок( Знач Запрос )
	
	Перем ТипВнешнегоХранилища;
	
	ТипВнешнегоХранилища = Запрос.ПараметрыURL.Получить( "ТипВнешнегоХранилища" );
	Возврат ( ТипВнешнегоХранилища <> Неопределено И ТипВнешнегоХранилища = "epf" );
	
КонецФункции

// Проверяет является ли запрос событием "Push Hook".
// 
// Параметры:
// 	Запрос - HTTPСервисЗапрос - HTTP-запрос;
// Возвращаемое значение:
// 	Булево - Истина - запро является Push Hook, иначе - Ложь.
Функция ЭтоСобытиеPush( Знач Запрос )
	
	Перем Событие;
	
	Событие = Запрос.Заголовки.Получить( "X-Gitlab-Event" );
	Возврат ( ЗначениеЗаполнено(Событие) И (Событие = "Push Hook") );
	
КонецФункции

Процедура ПроверитьЗаголовкиЗапросаWebhooksPOST( Знач ИдентификаторСобытия, Знач Запрос, Ответ )
	
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;

	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
	ДополнительныеПараметры.Объект = ИдентификаторСобытия;

	Если ( НЕ ЭтоРепозиторийВнешнихОтчетовИОбработок(Запрос) ) Тогда

		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().BAD_REQUEST );
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр("ru = 'Сервис доступен только для внешних отчетов и обработок.'");
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
												 
		Возврат;
	
	КонецЕсли;
	
	Если ( НЕ ЭтоСобытиеPush(Запрос) ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().BAD_REQUEST );
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр("ru = 'Сервис обрабатывает только события ""Push Hook"".'");
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
												 
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

// Десериализует тело HTTP запроса из текста в формате JSON в универсальную коллекцию.
// 
// Параметры:
// 	ИдентификаторСобытия - СправочникСсылка.ОбработчикиСобытий - ссылка на элемент справочника с обработчиками событий;
// 	Запрос - HTTPСервисЗапрос - HTTP-запрос;
// 	Ответ - HTTPСервисОтвет - HTTP-ответ;
// 	Данные - Соответствие - (исходящий параметр) десериализованное тело запроса; исходный текст тела запроса
//		добавляется в структуру с ключом "json".
Процедура ПолучитьДанныеТелаЗапроса(Знач ИдентификаторСобытия, Знач Запрос, Ответ, Данные = Неопределено)
	
	Перем Поток;
	Перем ПараметрыПреобразования;
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
	ДополнительныеПараметры.Объект = ИдентификаторСобытия;	
	
	ТекстСообщения = НСтр( "ru = 'Начало получения тела запроса...'" );
	Логирование.Информация( "GitLab.ОбработкаЗапроса.Начало", ТекстСообщения, ДополнительныеПараметры );
	
	Поток = Запрос.ПолучитьТелоКакПоток();
	
	Попытка
		
		ПараметрыПреобразования = Новый Структура();
		ПараметрыПреобразования.Вставить( "ПрочитатьВСоответствие", Истина );
		ПараметрыПреобразования.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
		
		Данные = КоннекторHTTP.JsonВОбъект( Поток, , ПараметрыПреобразования );
		
		ОбщегоНазначения.ДополнитьКоллекциюТекстомИзПотока(Поток, "json", Данные);
		
		Поток.Закрыть();
		
		ТекстСообщения = НСтр( "ru = 'Окончание получения тела запроса...'" );
		Логирование.Информация( "GitLab.ОбработкаЗапроса.Окончание", ТекстСообщения, ДополнительныеПараметры );

	Исключение
		
		Поток.Закрыть();
		ТекстСообщения = НСтр( "ru = '" + ИнформацияОбОшибке().Описание + "'" );
		Логирование.Ошибка( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти