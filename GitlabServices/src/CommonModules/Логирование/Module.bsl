////////////////////////////////////////////////////////////////////////////////
//
// Логирование.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Логирует информационное событие по объекту webhook с возможностью передачи сообщения в тело HTTP-ответа.
// 
// Параметры:
// 	Событие - Строка - логируемое событие;
// 	Сообщение - Строка - текст сообщения;
// 	Объект - СправочникиСсылка.ОбработчикиСобытий - ссылка на логируемый объект;
// 	HTTPСервисОтвет - Неопределено, HTTPСервисОтвет - если передан объект HTTPСервисОтвет, то в него будет
// 		добавлено тело сообщения в формате json.
Процедура Информация( Знач Событие, Знач Сообщение, Знач Объект = Неопределено, Знач HTTPСервисОтвет = Неопределено ) Экспорт
	
	Записать( Событие, УровеньЖурналаРегистрации.Информация, Сообщение, Объект, HTTPСервисОтвет );
	
КонецПроцедуры

// Логирует предупреждение по объекту webhook с возможностью передачи сообщения в тело HTTP-ответа.
// 
// Параметры:
// 	Событие - Строка - логируемое событие;
// 	ТекстСообщения - Строка - текст сообщения;
// 	Объект - СправочникиСсылка.ОбработчикиСобытий - ссылка на логируемый объект;
// 	HTTPСервисОтвет - Неопределено, HTTPСервисОтвет - если передан объект HTTPСервисОтвет, то в него будет
// 		добавлено тело сообщения в формате JSON.
Процедура Предупреждение( Знач Событие, Знач Сообщение, Знач Объект = Неопределено, Знач HTTPСервисОтвет = Неопределено ) Экспорт
	
	Записать( Событие, УровеньЖурналаРегистрации.Предупреждение, Сообщение, Объект, HTTPСервисОтвет );
	
КонецПроцедуры

// Логирует ошибку по объекту webhook с привязкой к событию и возможностью передачи сообщения в тело HTTP-ответа.
// 
// Параметры:
// 	Событие - Строка - логируемое событие;
// 	ТекстСообщения - Строка - текст сообщения;
// 	Объект - СправочникиСсылка.ОбработчикиСобытий - ссылка на логируемый объект;
// 	HTTPСервисОтвет - Неопределено, HTTPСервисОтвет - если передан объект HTTPСервисОтвет, то в него будет
// 		добавлено тело сообщения в формате json.
Процедура Ошибка( Знач Событие, Знач Сообщение, Знач Объект = Неопределено, Знач HTTPСервисОтвет = Неопределено ) Экспорт
	
	Записать( Событие, УровеньЖурналаРегистрации.Ошибка, Сообщение, Объект, HTTPСервисОтвет);
	
КонецПроцедуры

// Парсинг строки события на элементы и возврат их в виде структуры.
// 
// Параметры:
// 	ТекстСобытия - Строка - логируемое ТекстСобытия;
// Возвращаемое значение:
// 	Структура - Описание:
// * Объект - Строка - объект ("Webhook"), для которого логируются события;
// * Событие - Строка - текст события;
// * КодСостоянияHTTP - Число - код состояния HTTP;
Функция ПреобразоватьСтрокуСобытияВСтруктуру(Знач ТекстСобытия) Экспорт
	
	Перем ЭлементыСобытия;
	Перем ПредставлениеСобытия;
	Перем ОписаниеТипа;
	Перем ИндексПоследнегоЭлемента;
	Перем ПоследнийЭлемент;
	Перем Результат;
	
	Результат = Новый Структура;
	Результат.Вставить("Объект", "");
	Результат.Вставить("Источник", "System");
	Результат.Вставить("Событие", "");
	Результат.Вставить("ПредставлениеСобытия", "");
	Результат.Вставить("КодСостоянияHTTP", 0);
	
	Если ТипЗнч(ТекстСобытия) <> Тип("Строка") Тогда
		Возврат Результат;
	КонецЕсли;	
	
	ЭлементыСобытия = СтрРазделить(ТекстСобытия, ".");
	
	Если ЭлементыСобытия.Количество() < 3 Тогда
		Возврат Результат;					
	КонецЕсли;

	Результат.Объект = ЭлементыСобытия[0];
	Результат.Источник = ЭлементыСобытия[1];
	Результат.Событие = ТекстСобытия;
	
	ПоследнийЭлемент = ЭлементыСобытия[ЭлементыСобытия.ВГраница()];
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ПоследнийЭлемент = ОписаниеТипа.ПривестиЗначение(ПоследнийЭлемент);
	Результат.КодСостоянияHTTP = ПоследнийЭлемент;
	
	ИндексПоследнегоЭлемента = ?(ПоследнийЭлемент = 0, ЭлементыСобытия.ВГраница(), ЭлементыСобытия.ВГраница() - 1);

	ПредставлениеСобытия = Новый Массив;
	Для Индекс = 2 По ИндексПоследнегоЭлемента Цикл
		ПредставлениеСобытия.Добавить(ЭлементыСобытия[Индекс]);
	КонецЦикла;
	
	Результат.ПредставлениеСобытия = СтрСоединить(ПредставлениеСобытия, ".");
	
	Возврат Результат;
	
КонецФункции

// Декоратор (обертка) загрузки данных в некоторый объект из журнала регистрации. Например, если в качестве метаданных
// передать справочник и указать в ТабличнаяЧасть имя, то в этот справочник (в табличную часть) будут загружены данные
// из журнала регистрации по переданным в процедуру параметрам отбора.
// 
// Параметры:
// 	Метаданные - ОбъектМетаданных - объект, в который необходимо загрузить данные журнала регистрации;
// 	ТабличнаяЧасть - Строка - имя табличной части объекта метаданных,
// 		поддерживающих табличные части (например, для справочников);
// 	ПараметрыОтбора - Структура - параметры отбора журнала регистрации
// 		(См. глобальный контекст ЗагрузитьИсториюСобытийВходящихПараметров);
// 	ДобавленоЗаписей - Число - возвращаемый параметр, количество добавленных записей;
Процедура ДекораторЗагрузитьИсториюСобытий(Знач Метаданные,
												Знач ТабличнаяЧасть = Неопределено,
												Знач ПараметрыОтбора,
												ДобавленоЗаписей) Экспорт
	
	Перем Ссылка;
	Перем ТекстСообщения;
	
	Если ОбщегоНазначения.ЭтоСправочник(Метаданные) Тогда
		
		Если ТабличнаяЧасть = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Метаданные.ТабличныеЧасти.Найти(ТабличнаяЧасть) = Неопределено Тогда
			Возврат;			
		КонецЕсли;
		
		Ссылка = Неопределено;
		Если ПараметрыОтбора.Свойство("Данные", Ссылка) Тогда
			Попытка
				Справочники[Метаданные.Имя].ЗагрузитьИсториюСобытий(Ссылка, ПараметрыОтбора, ДобавленоЗаписей);
			Исключение
				ТекстСообщения = НСтр("ru = 'Для Справочник.%1 не реализован метод ЗагрузитьИсториюСобытий().'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Метаданные.Имя);
				Логирование.Ошибка( "System.ИсторияСобытий", ТекстСообщения, Ссылка );
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// ... тут может быть реализация для регистра сведений и т.д.

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Записать(Знач Событие, Знач Тип, Знач Сообщение, Знач Объект = Неопределено, Знач Ответ = Неопределено)
	
	Перем ИмяСобытия;
	Перем ЭтоHTTPСервисОтвет;
	
	ИмяСобытия = "ОбработчикиСобытий." + Событие; //TODO
	
	ЭтоHTTPСервисОтвет = (Ответ <> Неопределено И ТипЗнч(Ответ) = Тип("HTTPСервисОтвет"));
	ЭтоHTTPОтвет = (Ответ <> Неопределено И ТипЗнч(Ответ) = Тип("HTTPОтвет"));
	
	Если ЭтоHTTPСервисОтвет ИЛИ ЭтоHTTPОтвет Тогда
		
		Если ( ЭтоHTTPСервисОтвет И КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда

			Ответ.Заголовки.Вставить("Content-Type", "application/json");
			ТелоОтвета = Новый Структура;
			ТелоОтвета.Вставить(Строка(Тип), Новый Структура("Сообщение", Сообщение));
			Ответ.УстановитьТелоИзСтроки( КоннекторHTTP.ОбъектВJson(ТелоОтвета) );

		КонецЕсли;
		
		ИмяСобытия = ИмяСобытия + "." + Строка(Ответ.КодСостояния);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 Тип,
							 Метаданные.Справочники.ОбработчикиСобытий, // TODO ???
							 Объект,
							 Сообщение);
	
КонецПроцедуры

#КонецОбласти