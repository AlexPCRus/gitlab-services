////////////////////////////////////////////////////////////////////////////////
// Работа с HTTP-сервисами (hs).
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Формирование краткого описания сервиса по метаданным конфигурации в виде коллекции.
// 
// Параметры:
// 	ИмяСервиса - Строка - имя сервиса в конфигурации.
// Возвращаемое значение:
// 	Структура - коллекция с описанием сервиса:
//	* name - Строка - имя сервиса.
//	* desc - Строка - комментарий к сервису.
// 	* enabled - Булево - Истина - функциональность включена, иначе - Ложь.
// 	* groups - Массив из Структура - описание:
//		** name - Строка - имя шаблона URL.
//		** desc - Строка - комментарий к шаблону URL.
//		** template - Строка - шаблон.
//		** methods - Массив из Структура - описание:
//			*** name - Строка - имя метода сервиса.
//			*** desc - Строка - комментарий к методу сервиса.
//			*** method - Строка - HTTP-метод сервиса.
//			
// @tested
Функция ОписаниеСервиса(Знач ИмяСервиса) Экспорт
	
	Перем Описание;
	Перем МетаданныеСервиса;
	
	Описание = Новый Структура;
	
	МетаданныеСервиса = Метаданные.HTTPСервисы.Найти(ИмяСервиса);
	Если (МетаданныеСервиса = Неопределено) Тогда
		Возврат Описание;
	КонецЕсли;
	
	ПодготовитьОписаниеСервиса(ИмяСервиса, МетаданныеСервиса, Описание);
	
	Возврат Описание;
	
КонецФункции

// Получение краткого описания веб-сервиса по URL.
// 
// Параметры:
// 	URL - Строка - URL веб-сервиса. 
// Возвращаемое значение:
// 	- Неопределено - если сервис не найден, иначе возвращает коллекцию с ответом и телом ответа в различных форматах;
// 	- ФиксированнаяСтруктура - описание:
//	* Ответ - Структура - (См. КоннекторHTTP.Get)
//	* Соответствие - Соответствие - (См. КоннекторHTTP.КакJson)
// 	* JSON - Строка - (См. КоннекторHTTP.КакТекст)
//			
// @tested
Функция ОписаниеСервисаПоАдресу(Знач URL) Экспорт
	
	Перем Результат;
	Перем Ответ;

	Результат = Неопределено;
	Если ( ТипЗнч(URL) <> Тип("Строка") ИЛИ ПустаяСтрока(URL) ) Тогда
		Возврат Результат; 					
	КонецЕсли;
	
	Ответ = КоннекторHTTP.Get(URL);		
	Если ( ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Ответ.Тело) ) Тогда
		Результат = Новый Структура;
		Результат.Вставить("Ответ", Ответ);
		Результат.Вставить("Соответствие", КоннекторHTTP.КакJson(Ответ));
		Результат.Вставить("json", КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8));
		Результат = Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Устанавливает тело HTTP-ответа в виде строки в формате JSON. Если передана строка, то в тело ответа записывается
// строка без ее предварительной сериализации и проверки структуры содержимого на соответствие формату JSON.
// Если передана структура, то производится предварительная сериализация структуры в строку в формате JSON.
// 
// Параметры:
// 	HTTPСервисОтвет - HTTPСервисОтвет - HTTP-ответ.
// 	Данные - Строка, Структура - строка в формате JSON или произвольная структура,
//		которая может быть сериализована в формат JSON.
//			
// @tested 
Процедура УстановитьТелоОтветаИзJSON(HTTPСервисОтвет, Знач Данные) Экспорт
	
	Перем СтрокаJSON;
	
	СтрокаJSON = ?( (ТипЗнч(Данные) = Тип("Структура")), СтруктураВJSON(Данные), Данные );			
	HTTPСервисОтвет.Заголовки.Вставить("Content-Type", "application/json");
	HTTPСервисОтвет.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);

КонецПроцедуры

// Добавляет сообщение в тело ответа в формате JSON по событиям журнала регистрации. Если событие не указано, то
// по умолчанию выбирается сообщение уровня "Информация".
// 
// Параметры:
// 	HTTPСервисОтвет - HTTPСервисОтвет - HTTP-ответ.
// 	Текст - Строка - текст сообщения.
//	Событие - ПеречислениеСсылка.УровеньЖурналаРегистрации - уровень важности события журнала регистрации.
//			
// @tested
Процедура СобытиеЖурналаРегистрацииВТелоОтвета(HTTPСервисОтвет, Знач Текст, Знач Событие = Неопределено) Экспорт
	
	Перем ПеречислениеУровеньЖурналаРегистрации;
	Перем Сообщение;
	
	ПеречислениеУровеньЖурналаРегистрации = ( ТипЗнч(Событие) = Тип("ПеречислениеСсылка.УровеньЖурналаРегистрации") );
	
	Если ( (Событие = Неопределено) ИЛИ (НЕ ПеречислениеУровеньЖурналаРегистрации) ) Тогда
		Событие = Перечисления.УровеньЖурналаРегистрации.Информация;				
	КонецЕсли;
	
	Сообщение = Новый Структура;
	Сообщение.Вставить(Строка(Событие), Новый Структура("Сообщение", Текст));
	УстановитьТелоОтветаИзJSON(HTTPСервисОтвет, Сообщение);

КонецПроцедуры

// Получает тело HTTP-ответа в формате JSON и преобразует его в коллекцию. Если ДобавлятьИсточник=Истина,
// то дополнительно в коллекцию по ключу "json" добавляется элемент с текстом тела HTTP-ответа в формате JSON. 
// 
// Параметры:
// 	HTTPОтвет - HTTPОтвет - HTTP-ответ;
//	ЭтоСоответствие - Булево - если Истина, то JSON будет преобразован в Соответствие, если Ложь, то в Структуру;
// 	ДобавлятьИсточник - Булево - если Истина, то в коллекцию по ключу "json" добавляется элемент
// 		с текстом в формате JSON;
// 	Коллекция - Неопределено, Соответствие, Структура - (исходящий параметр),
//		тело запроса преобразованное из текста в формате JSON в Соответствие или Структуру;
//			
// @tested
Процедура ТелоHTTPОтветаВКоллекциюКакJSON(Знач HTTPОтвет, Знач ЭтоСоответствие = Ложь, Знач ДобавлятьИсточник = Ложь,
				Коллекция = Неопределено) Экспорт
	
	Перем Поток;
	
	Поток = HTTPОтвет.ПолучитьТелоКакПоток();

	Попытка
		
		ОбщегоНазначения.ПотокВКоллекциюКакJSON( Поток, ЭтоСоответствие, ДобавлятьИсточник, Коллекция );
		
	Исключение

		Поток.Закрыть();
		ВызватьИсключение;
	
	КонецПопытки;
	
	Поток.Закрыть();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьОписаниеСервиса(Знач ИмяСервиса, Знач МетаданныеСервиса, Описание)

	Перем ШаблоныURL;	
	Перем ОписаниеШаблоновURL;
	
	Описание.Вставить("name", ИмяСервиса);
	Описание.Вставить("desc", МетаданныеСервиса.Комментарий);
	Описание.Вставить("enabled", ПолучитьФункциональнуюОпцию("ЗагружатьФайлыИзВнешнегоХранилища"));
	
	ШаблоныURL = МетаданныеСервиса.ШаблоныURL;
	ОписаниеШаблоновURL = ОписаниеШаблоновСервиса(ШаблоныURL);
	
	Описание.Вставить("groups", ОписаниеШаблоновURL);

КонецПроцедуры

Функция ОписаниеШаблоновСервиса(Знач ШаблоныURL)
	
	Перем ШаблонURL;
	Перем ОписаниеШаблонаURL;
	Перем ОписаниеШаблоновURL;
	
	Перем Методы;
	Перем ОписаниеМетодов;

	ОписаниеШаблоновURL = Новый Массив;
	Для каждого ШаблонURL Из ШаблоныURL Цикл
		
		ОписаниеШаблонаURL = Новый Структура;
		ОписаниеШаблонаURL.Вставить("name", ШаблонURL.Имя);
		ОписаниеШаблонаURL.Вставить("desc", ШаблонURL.Комментарий);
		ОписаниеШаблонаURL.Вставить("template", ШаблонURL.Шаблон);

		Методы = ШаблонURL.Методы;
		ОписаниеМетодов = ОписаниеМетодовСервиса(Методы);
		
		ОписаниеШаблонаURL.Вставить("methods", ОписаниеМетодов);
		ОписаниеШаблоновURL.Добавить(ОписаниеШаблонаURL);
		
	КонецЦикла;
	
	Возврат ОписаниеШаблоновURL;

КонецФункции

Функция ОписаниеМетодовСервиса(Знач Методы)
	
	Перем Метод;
	Перем ОписаниеМетода;
	Перем ОписаниеМетодов;
	
	ОписаниеМетодов = Новый Массив;
	Для каждого Метод Из Методы Цикл
		ОписаниеМетода = Новый Структура;
		ОписаниеМетода.Вставить("name", Метод.Имя);
		ОписаниеМетода.Вставить("desc", Метод.Комментарий);
		ОписаниеМетода.Вставить("method", Строка(Метод.HTTPМетод));
		ОписаниеМетодов.Добавить(ОписаниеМетода);
	КонецЦикла;
	
	Возврат ОписаниеМетодов;

КонецФункции

Функция СтруктураВJSON(Знач Данные)
	
	Перем ЗаписьJSON;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти