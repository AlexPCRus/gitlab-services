////////////////////////////////////////////////////////////////////////////////
// Работа с REST сервисами.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Краткое описание сервиса: шаблоны URL и методы.
// 
// Параметры:
// 	ИмяСервиса - ЗаписьЖурналаРегистрации - имя сервиса в метаданных.
// Возвращаемое значение:
// 	Структура - описание:
//	* name - ЗаписьЖурналаРегистрации - имя сервиса.
//	* desc - ЗаписьЖурналаРегистрации - комментарий к сервису.
// 	* enabled - Булево - Истина - функциональность включена, иначе - Ложь.
// 	* groups - Массив из Структура - описание:
//		** name - ЗаписьЖурналаРегистрации - имя шаблона URL.
//		** desc - ЗаписьЖурналаРегистрации - комментарий к шаблону URL.
//		** template - ЗаписьЖурналаРегистрации - шаблон.
//		** methods - Массив из Структура - описание:
//			*** name - ЗаписьЖурналаРегистрации - имя метода сервиса.
//			*** desc - ЗаписьЖурналаРегистрации - комментарий к методу сервиса.
//			*** method - ЗаписьЖурналаРегистрации - HTTP-метод сервиса.
Функция ОписаниеСервиса(Знач ИмяСервиса) Экспорт
	
	Перем Описание;
	Перем МетаданныеСервиса;
	
	Описание = Новый Структура;
	
	МетаданныеСервиса = Метаданные.HTTPСервисы.Найти(ИмяСервиса);
	Если МетаданныеСервиса = Неопределено Тогда
		Возврат Описание;
	КонецЕсли;
	
	ПодготовитьОписаниеСервиса(ИмяСервиса, МетаданныеСервиса, Описание);
	
	Возврат Описание;
	
КонецФункции

// Проверяет наличие параметра в запросе и равенство параметра переданному в функцию значению.
// 
// Параметры:
// 	HTTPСервисЗапрос - HTTPСервисЗапрос - HTTP запрос.
// 	Параметр - ЗаписьЖурналаРегистрации - искомый параметр.
// 	Значение - ЗаписьЖурналаРегистрации - проверяемое значение.
// Возвращаемое значение:
// 	- Неопределено - если параметр отсутствует или его значение не равен проверяемому значению.
// 	- ЗаписьЖурналаРегистрации - значение параметра, если переданный параметр существует и он равен проверяемому значению.
Функция ПроверитьЗначениеПараметра(Знач HTTPСервисЗапрос, Знач Параметр, Знач Значение = "") Экспорт
	
	Перем Результат;
	
	Результат = HTTPСервисЗапрос.ПараметрыURL.Получить(Параметр);
	
	Если ((Результат <> Неопределено) И (Результат <> Значение)) Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет сообщение об ошибке в тело ответа в формате JSON.
// 
// Параметры:
// 	HTTPСервисОтвет - HTTPСервисОтвет - HTTP ответ.
// 	ТекстСообщения - ЗаписьЖурналаРегистрации - текст описания ошибки.
Процедура ДобавитьВТелоОтветаСообщениеОбОшибке(HTTPСервисОтвет, Знач ТекстСообщения) Экспорт
	
	Перем ТелоСообщения;
	Перем ПараметрыСообщения;
	
	ТелоСообщения = Новый Структура;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("message", ТекстСообщения);
	ТелоСообщения.Вставить("error", ПараметрыСообщения);
	УстановитьТелоОтветаИзСтруктурыВФорматеJSON(HTTPСервисОтвет, ТелоСообщения);

КонецПроцедуры

// Добавляет информационное сообщение в тело ответа в формате JSON.
// 
// Параметры:
// 	HTTPСервисОтвет - HTTPСервисОтвет - HTTP ответ.
// 	ТекстСообщения - ЗаписьЖурналаРегистрации - текст с информацией.
Процедура ДобавитьВТелоОтветаСообщениеСИнформацией(HTTPСервисОтвет, Знач ТекстСообщения) Экспорт
	
	Перем ТелоСообщения;
	Перем ПараметрыСообщения;
	
	ТелоСообщения = Новый Структура;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("message", ТекстСообщения);
	ТелоСообщения.Вставить("info", ПараметрыСообщения);
	УстановитьТелоОтветаИзСтруктурыВФорматеJSON(HTTPСервисОтвет, ТелоСообщения);

КонецПроцедуры

// Устанавливает тело ответа в формате JSON сериализуя переданную в функцию Структуру.
// 
// Параметры:
// 	HTTPСервисОтвет - HTTPСервисОтвет - HTTP ответ.
// 	Структура - Структура - произвольная структура, которая может быть сериализована. 
Процедура УстановитьТелоОтветаИзСтруктурыВФорматеJSON(HTTPСервисОтвет, Знач Структура) Экспорт
	
	Перем ЗаписьJSON;
	Перем СтрокаJSON;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	HTTPСервисОтвет.Заголовки.Вставить("Content-Type", "application/json");
	HTTPСервисОтвет.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);

КонецПроцедуры

// Получает тело HTTP-ответа в формате json и преобразует его в коллекцию.
// 
// Параметры:
// 	HTTPОтвет - HTTPОтвет - HTTP-ответ;
//	ЭтоСоответствие - Булево - если Истина, то json будет преобразован в Соответствие, если Ложь - в Структуру;
// 	ДанныеТела - Неопределено, Соответствие, Структура - исходящий параметр,
//		тело запроса преобразованное из формата json в Соответствие или Структура. 
Процедура ПреобразоватьТелоHTTPОтветаИзФорматаJSON(Знач HTTPОтвет, Знач ЭтоСоответствие = Ложь, ДанныеТела = Неопределено) Экспорт
	
	Перем Поток;
	
	Поток = HTTPОтвет.ПолучитьТелоКакПоток();
	ПреобразоватьПотокИзФорматаJSONВКоллекцию(Поток, ЭтоСоответствие, ДанныеТела);
		
КонецПроцедуры

// Получает поток данных и преобразует его в коллекцию через чтение потока как JSON.
// 
// Параметры:
// 	Поток - Поток - поток с данными;
// 	ЭтоСоответствие - Булево - если Истина, то JSON будет преобразован в Соответствие, если Ложь, то в Структуру;
// 	Данные - Неопределено, Соответствие, Структура - (исходящий параметр), преобразованные данные
//		из формата JSON в Соответствие или Структуру. 
Процедура ПреобразоватьПотокИзФорматаJSONВКоллекцию(Знач Поток,
													Знач ЭтоСоответствие,
														 Данные = Неопределено) Экспорт
	
	Перем ЧтениеJSON;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	Попытка
		
		ЧтениеJSON.ОткрытьПоток(Поток, КодировкаТекста.UTF8);
		Данные = ПрочитатьJSON(ЧтениеJSON, ЭтоСоответствие);
		ЧтениеJSON.Закрыть();
		
		Попытка
			ДополнитьДанныеИсходнымТекстомJSON(Поток, "json", Данные);
			Поток.Закрыть();
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	Исключение
		ЧтениеJSON.Закрыть();
		Поток.Закрыть();
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Дополняет коллекцию данных элементом в виде преобразованного в текст потока, переданного
// в процедуру в качестве параметра.
// 
// Параметры:
// 	Поток - Поток - поток с данными;
// 	Ключ - Строка - ключ добавляемого в коллекцию элемента;
// 	Данные - Структура, Соответствие - коллекция, в которую добавляется преобразованный в текст поток;
Процедура ДополнитьДанныеИсходнымТекстомJSON(Знач Поток, Знач Ключ, Данные) Экспорт
	
	Перем ИсходныйТекст;

	Попытка
		
		Поток.Перейти(0, ПозицияВПотоке.Начало);
		ЧтениеТекста = Новый ЧтениеТекста(Поток, КодировкаТекста.UTF8);
		ИсходныйТекст = ЧтениеТекста.Прочитать();
		Данные.Вставить(Ключ, ИсходныйТекст);
		ЧтениеТекста.Закрыть();
		
	Исключение
		ЧтениеТекста.Закрыть();
		Поток.Закрыть();
		
		ВызватьИсключение;

	КонецПопытки;
	

КонецПроцедуры

// Получает тело HTTP-ответа в формате json и преобразует его в Соответствие.
// 
// Параметры:
// 	HTTPОтвет - HTTPОтвет - HTTP-ответ;
// 	ДанныеТела - Неопределено, Соответствие - исходящий параметр,
//		тело запроса преобразованное из формата json в Соответствие или Структура. 
Процедура ПреобразоватьТелоHTTPОтветаИзФорматаJSONВСоответствие(Знач HTTPОтвет, ДанныеТела = Неопределено) Экспорт
	
	ПреобразоватьТелоHTTPОтветаИзФорматаJSON(HTTPОтвет, Истина, ДанныеТела);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьОписаниеСервиса(Знач ИмяСервиса, Знач МетаданныеСервиса = Неопределено, Описание)

	Перем ШаблоныURL;	
	Перем ОписаниеШаблоновURL;
	
	Если МетаданныеСервиса = Неопределено Тогда
		Возврат;		
	КонецЕсли;

	Описание.Вставить("name", ИмяСервиса);
	Описание.Вставить("desc", МетаданныеСервиса.Комментарий);
	Описание.Вставить("enabled", ПолучитьФункциональнуюОпцию("ЗагружатьФайлыИзВнешнегоХранилища"));
	
	ШаблоныURL = МетаданныеСервиса.ШаблоныURL;
	ОписаниеШаблоновURL = ОписаниеШаблоновСервиса(ШаблоныURL);
	
	Описание.Вставить("groups", ОписаниеШаблоновURL);

КонецПроцедуры

Функция ОписаниеШаблоновСервиса(Знач ШаблоныURL)
	
	Перем ШаблонURL;
	Перем ОписаниеШаблонаURL;
	Перем ОписаниеШаблоновURL;
	
	Перем Методы;
	Перем ОписаниеМетодов;

	ОписаниеШаблоновURL = Новый Массив;
	Для каждого ШаблонURL Из ШаблоныURL Цикл
		
		ОписаниеШаблонаURL = Новый Структура;
		ОписаниеШаблонаURL.Вставить("name", ШаблонURL.Имя);
		ОписаниеШаблонаURL.Вставить("desc", ШаблонURL.Комментарий);
		ОписаниеШаблонаURL.Вставить("template", ШаблонURL.Шаблон);

		Методы = ШаблонURL.Методы;
		ОписаниеМетодов = ОписаниеМетодовСервиса(Методы);
		
		ОписаниеШаблонаURL.Вставить("methods", ОписаниеМетодов);
		ОписаниеШаблоновURL.Добавить(ОписаниеШаблонаURL);
		
	КонецЦикла;
	
	Возврат ОписаниеШаблоновURL;

КонецФункции

Функция ОписаниеМетодовСервиса(Знач Методы)
	
	Перем Метод;
	Перем ОписаниеМетода;
	Перем ОписаниеМетодов;
	
	ОписаниеМетодов = Новый Массив;

	Для каждого Метод Из Методы Цикл
		ОписаниеМетода = Новый Структура;
		ОписаниеМетода.Вставить("name", Метод.Имя);
		ОписаниеМетода.Вставить("desc", Метод.Комментарий);
		ОписаниеМетода.Вставить("method", Строка(Метод.HTTPМетод));
		ОписаниеМетодов.Добавить(ОписаниеМетода);
	КонецЦикла;
	
	Возврат ОписаниеМетодов;

КонецФункции

#КонецОбласти